#!/usr/bin/env python
# coding: utf-8

# In[1]:


#Librerias
import numpy as np
import pandas as pd
get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.pyplot as plt
from sklearn import linear_model
import sympy as sy


# In[199]:


#Lectura del archivo
archivo_excel = pd.read_excel('8_10.xlsx', header=0, delimiter=';')
archivo_excel


# In[200]:


#separación de la etapa
X=archivo_excel.iloc[130:147,[0,2]] #Tercera Etapa
df = X
print(df)
#creación de variables de la etapa
x = [x for x in df['Tiempo']]
y = [x for x in df['Aceleracion']]


# In[164]:


#Método de Euler
def euler(f,x0,y0,paso,xf):
    y=[y0]
    x=[x0]
    h=paso
    n=int((xf-x0)/h)
    for i in range(1,n+1):
        yi=y[(i-1)]+h*f(x[(i-1)],y[(i-1)])
        xi=x[(i-1)]+h
        x.append(xi)
        y.append(yi)
    return x,y


# In[201]:


#Creación de la función (func1) obtenida por el ajuste lineal aplicado al comportamiento de los datos de aceleración
func1= lambda x,y: 71.156*x-104.29
Base=pd.DataFrame(euler(func1,1.3,0.1,0.01,1.47))
Base= Base.transpose()
print(Base)
#Grafica de la función Velocidad
plt.plot(Base[0],Base[1],'ro')


# In[202]:


#Creación de la función (func2) obtenida por el ajuste cuadrático 
#aplicado al comportamiento de los datos de velocidad obtenidos en el método anterior de Euler
func2= lambda x,y: 35.578*x**2-104.65*x+76.013
BasePos=pd.DataFrame(euler(func2,1.3,8.47,0.01,1.47))
BasePos= BasePos.transpose()
print(BasePos)
#Grafica de la función Posición
plt.plot(BasePos[0],BasePos[1])
