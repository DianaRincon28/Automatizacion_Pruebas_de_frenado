#!/usr/bin/env python
# coding: utf-8

# # Ajuste primera Etapa

# In[1]:


#Librerias
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import sympy as sp
from sklearn.preprocessing import PolynomialFeatures 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error
get_ipython().run_line_magic('matplotlib', 'inline')


# In[21]:


#Lectura de archivo
archivo_excel = pd.read_excel('Base45kmh.xlsx',sheet_name='Velocidad', header=0, delimiter=';')
archivo_excel


# In[27]:


#Separación primera etapa
X=archivo_excel.iloc[1:90,[0,1]]
#Grafica primera etapa
fig = plt.figure()
plt.plot(X.iloc[:,0],X.iloc[:,1], 'ro')
plt.title('Grafica Original Etapa 1')
plt.xlabel("Tiempo (s)")
plt.ylabel("Velocidad (m/s)")
plt.grid()
plt.show()


# In[28]:


#Definición base de variables bases de datos
df = X
x = [x for x in df['Tiempo']]
y = [x for x in df['Velocidad']]


# In[29]:


#Calculo máximo y minimo valor
maximo = max(y)
minimo = min(y)
print(maximo)
print(minimo)


# In[30]:


####Ajuste Logaritmico#####
lista = []
x1 = []
y1 = []
for i in range(len(y)):
    lista.append(0.000001)
for i in range(len(x)):
    x1.append(x[i]+lista[i])
    y1.append(y[i]+lista[i])
log_x = np.log10(x1)
log_y = np.log10(y1)
coefficients = np.polyfit(log_x, y, 1)


# In[31]:


#Coeficientes del ajuste logaritmico
print(coefficients)


# In[32]:


#Grafica ajuste logaritmico
c = coefficients[0] * log_x + coefficients[1]
print(c)
fig = plt.figure()
plt.title('Ajuste Logaritmico')
plt.plot(x, y, "o")
plt.xlabel("Tiempo (s)")
plt.ylabel("Velocidad (m/s)")
plt.plot(x, c)
plt.grid()


# ## Error Cuadrático Medio para Regresión
# 
# 
# El Error Cuadrático Medio es el criterio de evaluación más usado para problemas de regresión.
# 
# ### Error en cada punto:
# 
# $$errorcuadratico=(real − estimado)^2$$
# 
# ### Error medio:
# 
# $$MSE=\frac{1}{M}\sum_{i=1}^{M}(real_i-estimado_i)^2$$
# 
# ### Raiz error medio:
# 
# $$RMSE=\sqrt{\frac{1}{M}\sum_{i=1}^{M}(real_i-estimado_i)^2}$$

# In[33]:


#Error Estimado
C=np.array(c)
X1=np.array(X)
X2=X1[:,1]
Error=max(X2-C)
print("Error Estimado de diferencia punto a punto =",Error)
#Error Cuadrático medio
MSE = mean_squared_error(X2, C)
print("Error Cuadrático Medio =",MSE)


# In[35]:


#Ajuste Potencial
def reg_potencial(x,y,xi):
    n=len(x)
    sumlogX=0
    sumlogY=0
    sumlogXY=0
    sumlogX2=0
    for i in range(n):
        sumlogX += np.log10(x[i])
        sumlogY += np.log10(y[i])
        sumlogXY += np.log10(x[i])*np.log10(y[i])
        sumlogX2 += pow(np.log10(x[i]),2)
    A=np.ones((2,2))
    b=np.ones((2,1))
    for i in range(1):
        for j in range(1):
            A[0][0]=n
            A[0][1]=sumlogX
            A[1][0]=sumlogX
            A[1][1]=sumlogX2
            b[0][0]=sumlogY
            b[1][0]=sumlogXY
    a=np.linalg.solve(A,b)
    alpha=pow(10.0,a[0][0])
    beta=a[1][0]
    yi=alpha*pow(xi,beta)
    yr=alpha*pow(x,beta)
    print(yr)
    #Calculo de error estimado del ajuste
    MSE = mean_squared_error(y, yr)
    print("Error Cuadrático Medio =",MSE)
    print('--------------------')
    print('Resultados')
    print('Coeficiente=',alpha)
    print('Exponente=',beta)
    print('Para x = %.2f,y=%f\n'%(xi,yi))
    #Grafica del ajuste
    plt.figure(u'Regresion',figsize=(12,6),tight_layout=True)
    plt.subplot(122)
    plt.title('Regresion Potencial')
    plt.plot(x,y,'go')
    plt.plot(x,yr,color='blue')
    plt.xlabel('Tiempo (s)')
    plt.ylabel('Velocidad (m/s)')
    plt.grid()
    plt.show()


# In[36]:


#Creación matricial de las variables de las bases de datos
#a aplicar al ajuste
xa=np.array(x)
ya=np.array(y)


# In[37]:


#aplicación del ajuste
reg_potencial(xa,ya,len(x))


# In[39]:


#definición de la función f(x) para volver a datos originales
def f(x):
    return -9.718531111389918*(x**(1.2872992528088365))


# In[40]:


#grafica de la transformación
fig = plt.figure()
pyplot.plot(x, [f(i) for i in x],'red')
pyplot.title('Regresion Potencial')
pyplot.plot(x,[f(i) for i in x],'ko')
pyplot.xlabel('Tiempo (s)')
pyplot.ylabel('Velocidad (m/s)')
plt.grid()
plt.show()
